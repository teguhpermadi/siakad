<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
use PhpOffice\PhpSpreadsheet\IOFactory;
use PhpOffice\PhpSpreadsheet\Helper\Sample;
 
class Guru extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Guru_model');
        
        // cek user login
        check_login();

    } 

    /*
     * Listing of guru
     */
    function index()
    {
        $data['guru'] = $this->Guru_model->get_all_guru();
        
        $data['_view'] = 'guru/index';
        $this->load->view('template/header');
        $this->load->view('template/sidebar');
        $this->load->view('guru/index', $data);
        $this->load->view('template/footer');
    }

    /*
     * Adding a new guru
     */
    function add()
    {   
        $this->load->library('form_validation');

		$this->form_validation->set_rules('nama_lengkap','Nama Lengkap','required');
		$this->form_validation->set_rules('jenis_kelamin','Jenis Kelamin','required');
		// $this->form_validation->set_rules('nip','Nip','numeric');
		// $this->form_validation->set_rules('nik','Nik','numeric');
		// $this->form_validation->set_rules('nikk','Nikk','numeric');
		$this->form_validation->set_rules('email','Email','valid_email|required');
		$this->form_validation->set_rules('telp','Telp','numeric');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'jenis_kelamin' => $this->input->post('jenis_kelamin'),
				'nama_lengkap' => $this->input->post('nama_lengkap'),
				'tempat_lahir' => $this->input->post('tempat_lahir'),
				'tanggal_lahir' => $this->input->post('tanggal_lahir'),
				'nip' => $this->input->post('nip'),
				'nik' => $this->input->post('nik'),
				'nikk' => $this->input->post('nikk'),
				'alamat' => $this->input->post('alamat'),
				'gelar_depan' => $this->input->post('gelar_depan'),
				'gelar_belakang' => $this->input->post('gelar_belakang'),
				'pendidikan_terakhir' => $this->input->post('pendidikan_terakhir'),
				'email' => $this->input->post('email'),
				'telp' => $this->input->post('telp'),
            );
            
            $guru_id = $this->Guru_model->add_guru($params);
            $this->session->set_flashdata('berhasil', 'Anda berhasil menambahkan data <strong>'.$params['nama_lengkap'].'</strong>');
            redirect('guru/index');
        }
        else
        {            
            $data['_view'] = 'guru/add';
            $this->load->view('template/header');
            $this->load->view('template/sidebar', $data);
            $this->load->view('guru/add',$data);
            $this->load->view('template/footer');
            
        }
    }  

    /*
     * Editing a guru
     */
    function edit($id)
    {   
        // check if the guru exists before trying to edit it
        $data['guru'] = $this->Guru_model->get_guru($id);
        
        if(isset($data['guru']['id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('nama_lengkap','Nama Lengkap','required');
			$this->form_validation->set_rules('jenis_kelamin','Jenis Kelamin','required');
			// $this->form_validation->set_rules('nip','Nip','numeric');
			// $this->form_validation->set_rules('nik','Nik','numeric');
			// $this->form_validation->set_rules('nikk','Nikk','numeric');
			$this->form_validation->set_rules('email','Email','valid_email');
			$this->form_validation->set_rules('telp','Telp','numeric');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'jenis_kelamin' => $this->input->post('jenis_kelamin'),
					'nama_lengkap' => $this->input->post('nama_lengkap'),
					'tempat_lahir' => $this->input->post('tempat_lahir'),
					'tanggal_lahir' => $this->input->post('tanggal_lahir'),
					'nip' => $this->input->post('nip'),
					'nik' => $this->input->post('nik'),
					'nikk' => $this->input->post('nikk'),
					'alamat' => $this->input->post('alamat'),
					'gelar_depan' => $this->input->post('gelar_depan'),
					'gelar_belakang' => $this->input->post('gelar_belakang'),
					'pendidikan_terakhir' => $this->input->post('pendidikan_terakhir'),
					'email' => $this->input->post('email'),
					'telp' => $this->input->post('telp'),
                );

                $this->Guru_model->update_guru($id,$params);
                $this->session->set_flashdata('berhasil', 'Anda berhasil mengubah data <strong>'.$params['nama_lengkap'].'</strong>');
                redirect('guru/index');
            }
            else
            {
                $data['_view'] = 'guru/edit';
                $this->load->view('template/header');
                $this->load->view('template/sidebar', $data);
                $this->load->view('guru/edit',$data);
                $this->load->view('template/footer');

            }
        }
        else
            show_error('The guru you are trying to edit does not exist.');
    } 

    /*
     * Deleting guru
     */
    function remove($id)
    {
        $guru = $this->Guru_model->get_guru($id);

        // check if the guru exists before trying to delete it
        if(isset($guru['id']))
        {
            $this->session->set_flashdata('hapus', 'Anda berhasil menghapus data <strong>'.$guru['nama_lengkap'].'</strong>');
            $this->Guru_model->delete_guru($id);
            redirect('guru/index');
        }
        else
            show_error('The guru you are trying to delete does not exist.');
    }

    /*
    * upload guru 
    */
    function do_upload()
    {
        $file_ext = pathinfo($_FILES["userfile"]["name"], PATHINFO_EXTENSION);

        $config['upload_path']          = './uploads/';
        $config['allowed_types']        = 'xlsx|xls|csv';
        $config['overwrite']             = true;
        $config['file_name']             = 'guru';

        $this->load->library('upload', $config);

        if ( ! $this->upload->do_upload('userfile'))
        {
                $error = array('error' => $this->upload->display_errors());
                print_r($error);
        }
        else
        {
                $data = array('upload_data' => $this->upload->data());
                
                $helper = new Sample();
                $inputFileName = 'uploads/guru.'.$file_ext;
                $helper->log('Loading file ' . pathinfo($inputFileName, PATHINFO_BASENAME) . ' using IOFactory to identify the format');
                $spreadsheet = IOFactory::load($inputFileName);
                $sheetData = $spreadsheet->getActiveSheet()->toArray(null, true, true, true);
                $highestRow = $spreadsheet->getActiveSheet()->getHighestRow();
                
                // hitung jumlah data yang di upload
                $jumlahData = $highestRow - 1;
                $dataAwal = array();
                foreach($sheetData as $s) 
                {
                    array_push($dataAwal, array(
                        'nama_lengkap' => $s['A'],
                        'jenis_kelamin' => $s['B'],
                        'tempat_lahir' => $s['C'],
                        'tanggal_lahir' => $s['D'],
                        'nip' => $s['E'],
                        'nik' => $s['F'],
                        'nikk' => $s['G'],
                        'alamat' => $s['H'],
                        'gelar_depan' => $s['I'],
                        'gelar_belakang' => $s['J'],
                        'pendidikan_terakhir' => $s['K'],
                        'email' => $s['L'],
                        'telp' => $s['M']
                    ));
                }
                // $dataAwal membaca semua data yang ada di excel termasuk nama kolom
                // $dataAkhir membaca $dataAwal dari array urutan ke 2
                $dataAkhir = array_slice($dataAwal, 1);
                $this->session->set_flashdata('berhasil_upload', 'Anda berhasil mengunggah <strong>'.$jumlahData.' data guru.</strong>');
                
                $this->db->insert_batch('guru', $dataAkhir);
                unlink($inputFileName);
                redirect('guru');
        }
    }

    function download_template_guru()
    {
        force_download('downloads/template_guru.xlsx', null);
    }

    function delete_all_guru()
    {
        $this->db->empty_table('guru'); // Produces: DELETE FROM guru
        $this->session->set_flashdata('hapus', 'Anda berhasil menghapus <strong>semua data guru.</strong>');
        redirect('guru');
    }
    
    function add_to_user($id)
    {
        $guru = $this->Guru_model->get_guru($id);
        $name = trim($guru['nama_lengkap']);

        $last_name = (strpos($name, ' ') === false) ? '' : preg_replace('#.*\s([\w-]*)$#', '$1', $name);
        $first_name = trim( preg_replace('#'.$last_name.'#', '', $name ) );

        // setting password default
        $password_default = '12345678';

        // create_on
        $now = time();
        $human = unix_to_human($now);

        // get ip address
        $ip = $this->input->ip_address();

        // print_r($guru);
        $data = array(
            'ip_address' => $ip,
            'username' => $guru['email'],
            'first_name' => $first_name,
            'last_name' => $last_name,
            'phone' => $guru['telp'],
            'email' => $guru['email'],
            'password' => password_hash($password_default, PASSWORD_DEFAULT),
            'created_on' => human_to_unix($human),
            'active' => '1',
        );

        // print_r($data);
        // exit;
        $this->db->insert('users', $data);

        // id yang baru saja diinputkan
        $insert_id = $this->db->insert_id();

        $data_users = array(
            'user_id' => $insert_id,
            // group guru = 3
            'group_id' => 3, 
        );
        $this->db->insert('users_groups', $data_users);
        $this->session->set_flashdata('berhasil', 'Anda berhasil menambahkan data <strong>'.$guru['nama_lengkap'].'</strong> sebagai user. <br>Username : <strong>'.$guru['email'].'</strong> Password default : <strong>'.$password_default.'</strong>');
        redirect('guru');
    }
}